{
  "name": "restify-jwt",
  "version": "0.0.2",
  "description": "JWT authentication middleware.",
  "keywords": [
    "auth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "http",
    "jwt",
    "token",
    "oauth",
    "restify"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/amrav/restify-jwt.git"
  },
  "bugs": {
    "url": "http://github.com/amrav/restify-jwt/issues"
  },
  "author": {
    "name": "Vikrant Varma",
    "email": "vikrant.varma94@gmail.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "express-unless": "0.0.0",
    "jsonwebtoken": "~1.2.0",
    "restify": "^2.8.x"
  },
  "devDependencies": {
    "mocha": "1.x.x"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "node_modules/.bin/mocha --reporter spec"
  },
  "readme": "# restify-jwt\n\n[![Build Status](https://travis-ci.org/amrav/restify-jwt.svg)](https://travis-ci.org/amrav/restify-jwt)\n\n[Restify](http://mcavage.me/node-restify/) middleware that validates JsonWebTokens and sets `req.user`.\n\nThis module lets you authenticate HTTP requests using JWT tokens in your restify applications.\n\n## Install\n\n    $ npm install restify-jwt\n\n## Usage\n\nThe JWT authentication middleware authenticates callers using a JWT.\nIf the token is valid, `req.user` will be set with the JSON object decoded\nto be used by later middleware for authorization and access control.\n\nFor example,\n\n```javascript\nvar jwt = require('restify-jwt');\n\napp.get('/protected',\n  jwt({secret: 'shhhhhhared-secret'}),\n  function(req, res) {\n    if (!req.user.admin) return res.send(401);\n    res.send(200);\n  });\n```\n\nYou can specify audience and/or issuer as well:\n\n```javascript\njwt({ secret: 'shhhhhhared-secret',\n  audience: 'http://myapi/protected',\n  issuer: 'http://issuer' })\n```\n\n> If the JWT has an expiration (`exp`), it will be checked.\n\nOptionally you can make some paths unprotected as follows:\n\n```javascript\napp.use(jwt({ secret: 'shhhhhhared-secret'}).unless({path: ['/token']}));\n```\n\nThis is especially useful when applying to multiple routes.\n\nThis module also support tokens signed with public/private key pairs. Instead of a secret, you can specify a Buffer with the public key\n\n```javascript\nvar publicKey = fs.readFileSync('/pat/to/public.pub');\njwt({ secret: publicKey });\n```\n\nBy default, the decoded token is attached to `req.user` but can be configured with the `userProperty` option.\n\n```javascript\njwt({ secret: publicKey, userProperty: 'auth' });\n```\n\nYou might want to use this module to identify registered users without preventing unregistered clients to access to some data, you\ncan do it using the option _credentialsRequired_:\n\n    app.use(jwt({\n      secret: 'hello world !',\n      credentialsRequired: false\n    }));\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\nForked from [auth0/express-jwt](https://github.com/auth0/express-jwt). The major difference is that restify-jwt tries to use built in restify errors wherever possible.\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "_id": "restify-jwt@0.0.2",
  "dist": {
    "shasum": "fc55764eb7c7832e5a3293d476fa2c069813d6a6"
  },
  "_from": "restify-jwt@0.0.2",
  "_resolved": "http://npm-dev.uit.tla.uprr.com:5985/restify-jwt/-/restify-jwt-0.0.2.tgz"
}
